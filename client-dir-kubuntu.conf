Client {
  # имя 
  Name = kub-fd
  # ip адрес клиента
  Address = 192.168.1.20
  # порт, который клиент слушает
  FDPort = 9102
  # имя mysql базы данных Bacula
  Catalog = MyCatalog
  # пароль для FD
  Password = "PassClient_3"
  # период в течении которого информация о файлах задания
  # хранится в базе данных, по истечению периода эта
  #  информация удаляется(но не сами данные!!)
  File Retention = 30 days
  # тоже самое, только для самого задания
  Job Retention = 2 months
  # удалять записи из каталога(бд mysql) старше
  # вышеуказанных значений
  AutoPrune = yes
}

Storage {

  # имя хранилища и пароль
  Name = Kubunt-nfs
   Password = "Passtor_2"
  # fqdn имя сервера
  Address = 192.168.1.100
  # порт оставляем стандартный
  SDPort = 9103
  # имя девайса описанного в конфиге SD 
  Device = KubFileStorage
  # у нас все пишется на софтовый рэйд в файлы собственного
  # формата bacula(например
  # /media/nfs_linbackup_v1/kubuntu/Vol0001)
  Media Type = File
}

Schedule {
Name = "KubDiff"
Run = Level=Full on sat at 15:01
Run = Level=Differential on tue-fri at 15:02
} 

Pool {
  # имя пула, указывается в заданиях резервного копирования
  Name = poolkubnfs

  # тип пула, емнип  этой версии только такой поддерживается
  Pool Type = Backup

  # повторно использовать тома (сначала пишет в 1-ый,
  #потом в 2-ой, потом 3-й, 3-й закончился - снова в 1-й)   
   AutoPrune = yes 

  # удалять записи из bacula catalog (из mysql базы бакулы) 
  # старше нижеуказанных значений
   Recycle = yes                       

  # период в течении которого информация о томах(Voumes)
  # хранится в базе данных, по истечению периода эта 
  # информация удаляется
  Volume Retention = 5 days     
  Maximum Volume Bytes = 1G          
  Maximum Volumes = 3
  LabelFormat = "Kubvol"
}

FileSet {
  Name = "KubFileSet" 
  Include {
    Options {
      # разработчики яро рекомендуют юзать это опцию, 
      # создается сигнатура забекапленных файлов в md5
      signature = MD5 
    }
    # перечисляем то, что нужно бекапить
    File = /var/backups/opt/ 
    File = /etc/hosts 
    File = /etc/host.conf 
    File = /etc/network/interfaces 
    File = /etc/dnsmasq.conf 
    File = /etc/resolv.conf 
    File = /etc/ntp.conf 
    File = /home/rk/testbackup/
  }
  Exclude {
    # а это бекапить нет нужды
    File = /home/rk/testbackup/NTFS.dmg
 }
} 

Job {
  # имя задания 
  Name = "BackupKubFull"
  # тип(backup or restore)
  Type = Backup
  # уровень(полный, диференциальный или
  # инкрементный)
  Level = Full
  # имя SD ресурса                            
  Storage = Kubunt-nfs 
  # имя файл-сета(там рассказано что 
  # бекапить, а что не бекапить)
  FileSet="KubFileSet"
  # имя шедулера
  Schedule = "KubDiff"
  # имя пула(для разных клиентов разные пулы
  # томов(volume) куда пишутся сами  бекапы)
  Pool = poolkubnfs
  # имя клиента 
  Client=kub-fd
  # в этом файле содержится информация о том,
  # какие файлы должны будут востанавливаться, 
  #на каком вольюме находятся файлы, где конкретно
  # они находятся - это очень важные файлы, их
  # нужно бэкапить
  Write Bootstrap = "/var/lib/bacula/%n.bsr"
  # имя ресурса messages, который будет 
  # использоваться для этого задания
  Messages = Standard
  # скрипт запускающийся ДО выполнения задания 
  #(путь до скрипта  - это путь НА КЛИЕНТЕ!)
  ClientRunBeforeJob = "/root/sh/before_bg_db_backup.sh" 
  # скрипт запускающийся ПОСЛЕ выполнения задания            
  ClientRunAfterJob = "/root/sh/after_bg_db_backup.sh" 
  # УБРАТЬ ЕСЛИ НЕ ИСПОЛЬЗУЕТЕ СКРИПТЫ!!! 
}

Job {
# Имя задачи для восстановления данных
   Name = "RestoreKub"
   Type = Restore
   Client=kub-fd 
   FileSet="KubFileSet"
   Storage = winsrv-nfs
   Pool = poolkubnfs
   Messages = Standard
# Папка куда будут складывать восстановленные
# данные на клиенте. И что не затереть новую версию
# файлов, лучше их восстанавливать в отдельную папку
   Where = /home/rb/1/
}
